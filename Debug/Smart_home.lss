
Smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000015a  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094b  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000780  00000000  00000000  00000bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e6  00000000  00000000  0000137b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  00001c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>


int main(void)
{
	GPIO_Init();
  92:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_Init>
    while (1) 
    {
		//i =0;
		//for(i = 0 ; i  < 4 ;i++)
		//	*PORTB = Get_num_Keypad();
		GPIO_Write(group_test,0x00);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 90 00 	call	0x120	; 0x120 <GPIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f e9       	ldi	r18, 0x9F	; 159
  a0:	86 e8       	ldi	r24, 0x86	; 134
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1c>
  ae:	00 00       	nop
		_delay_ms(500);
		GPIO_Write(group_test,0x0f);
  b0:	6f e0       	ldi	r22, 0x0F	; 15
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 90 00 	call	0x120	; 0x120 <GPIO_Write>
  b8:	2f e9       	ldi	r18, 0x9F	; 159
  ba:	86 e8       	ldi	r24, 0x86	; 134
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x2c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x36>
  c8:	00 00       	nop
  ca:	e5 cf       	rjmp	.-54     	; 0x96 <main+0x4>

000000cc <GPIO_Init>:



/*A function to initialize all the GPIO Groups in the configurations*/
void GPIO_Init(void)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	

	/*loop through groups*/
	for(LoopIndex = 0 ; (LoopIndex < GPIO_GP_NUM && ErrorFlag == 0) ; LoopIndex++)
	{
		if(GPIO_ConfigParam[LoopIndex].PortID < PORTS_NUMBER)
  d0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GPIO_ConfigParam>
  d4:	e4 30       	cpi	r30, 0x04	; 4
  d6:	08 f5       	brcc	.+66     	; 0x11a <GPIO_Init+0x4e>
		{
			CfgPtr = &GPIO_ConfigParam[LoopIndex];
			
			/*initializing the port to make all bits Anded with the mask*/
			GPIO_DDR(CfgPtr->PortID) &=~(CfgPtr->Mask);
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e0 5a       	subi	r30, 0xA0	; 160
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	01 90       	ld	r0, Z+
  e4:	f0 81       	ld	r31, Z
  e6:	e0 2d       	mov	r30, r0
  e8:	df 01       	movw	r26, r30
  ea:	8e 91       	ld	r24, -X
  ec:	c8 e6       	ldi	r28, 0x68	; 104
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	39 81       	ldd	r19, Y+1	; 0x01
  f2:	93 2f       	mov	r25, r19
  f4:	90 95       	com	r25
  f6:	89 23       	and	r24, r25
  f8:	8c 93       	st	X, r24
			
			/*Put the group direction in it's register*/
			GPIO_DDR(CfgPtr->PortID) |= (CfgPtr->Direction)&(CfgPtr->Mask);
  fa:	2c 91       	ld	r18, X
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	43 2f       	mov	r20, r19
 100:	48 23       	and	r20, r24
 102:	24 2b       	or	r18, r20
 104:	2c 93       	st	X, r18

			/*initializing the port to make all bits Anded with the mask*/
			GPIO_WRITE(CfgPtr->PortID)&=~(CfgPtr->Mask);
 106:	20 81       	ld	r18, Z
 108:	92 23       	and	r25, r18
 10a:	90 83       	st	Z, r25
			
			/*Put the group Pull up data in it's register*/
			GPIO_WRITE(CfgPtr->PortID)|=~(CfgPtr->Direction)&(CfgPtr->Mask)&(CfgPtr->PullupON_OFF);
 10c:	90 81       	ld	r25, Z
 10e:	2b 81       	ldd	r18, Y+3	; 0x03
 110:	23 23       	and	r18, r19
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	89 2b       	or	r24, r25
 118:	80 83       	st	Z, r24
		else
		{
			ErrorFlag = 1;
		}
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <GPIO_Write>:
void GPIO_Write(u8 GroupId,u8 GroupData)
{
	const GPIO_CfgType *CfgWrite;
	//u8 ErrorFlag = 0;
	
	if ( GroupId < GPIO_GP_NUM )
 120:	81 11       	cpse	r24, r1
 122:	18 c0       	rjmp	.+48     	; 0x154 <GPIO_Write+0x34>
	{
		CfgWrite = &GPIO_ConfigParam[GroupId];
		
		/*save the value or port in another variable to work on it regards the original port*/
		u8 portcopy = GPIO_WRITE(CfgWrite->PortID);
 124:	a8 e6       	ldi	r26, 0x68	; 104
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ec 91       	ld	r30, X
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	e0 5a       	subi	r30, 0xA0	; 160
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	01 90       	ld	r0, Z+
 136:	f0 81       	ld	r31, Z
 138:	e0 2d       	mov	r30, r0
 13a:	80 81       	ld	r24, Z
		
		/*initializing the port to make all bits Anded with the mask*/
		portcopy &=~(CfgWrite->Mask);
 13c:	11 96       	adiw	r26, 0x01	; 1
 13e:	2c 91       	ld	r18, X
 140:	11 97       	sbiw	r26, 0x01	; 1
 142:	92 2f       	mov	r25, r18
 144:	90 95       	com	r25
 146:	89 23       	and	r24, r25
		
		/*save the data in the variable*/
		portcopy |= GroupData & CfgWrite->Mask & CfgWrite->Direction;
 148:	12 96       	adiw	r26, 0x02	; 2
 14a:	9c 91       	ld	r25, X
 14c:	92 23       	and	r25, r18
 14e:	69 23       	and	r22, r25
 150:	68 2b       	or	r22, r24
		
		/*save data in original register*/
		GPIO_WRITE(CfgWrite->PortID) = portcopy;
 152:	60 83       	st	Z, r22
 154:	08 95       	ret

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
