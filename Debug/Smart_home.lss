
Smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afe  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075f  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000504  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000529  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00002021  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002141  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  7a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <TC72_Transmit>:

#include <util/delay.h>


void TC72_Transmit(unsigned char TC_Addr,unsigned char TC_Data)
{
  82:	cf 93       	push	r28
  84:	c6 2f       	mov	r28, r22
	PORTC |=(1<<0);
  86:	a8 9a       	sbi	0x15, 0	; 21
	SPI_Data_Write(TC_Addr);
  88:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_Data_Write>
	SPI_Data_Write(TC_Data);
  8c:	8c 2f       	mov	r24, r28
  8e:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_Data_Write>
	PORTC &=~(1<<0);
  92:	a8 98       	cbi	0x15, 0	; 21
}
  94:	cf 91       	pop	r28
  96:	08 95       	ret

00000098 <TC72_Recieve>:
unsigned char TC72_Recieve(unsigned char TC_Addr)
{
	unsigned char Data;
	PORTC |=(1<<0);
  98:	a8 9a       	sbi	0x15, 0	; 21
	SPI_Data_Write(TC_Addr);
  9a:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_Data_Write>
	Data=SPI_Data_Read();
  9e:	0e 94 ca 00 	call	0x194	; 0x194 <SPI_Data_Read>
	PORTC &=~(1<<0);
  a2:	a8 98       	cbi	0x15, 0	; 21
	return Data;
}
  a4:	08 95       	ret

000000a6 <main>:


int main(void)
{
	SPI_Init();
  a6:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_Init>
    /* Replace with your application code */
	
	/*choose slave select*/
	DDRB = (1<<5)|(1<<7);
  aa:	80 ea       	ldi	r24, 0xA0	; 160
  ac:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
  b2:	81 bb       	out	0x11, r24	; 17
	DDRC |=(1<<0);
  b4:	a0 9a       	sbi	0x14, 0	; 20
	TC72_Transmit(0x80,0x15);
  b6:	65 e1       	ldi	r22, 0x15	; 21
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	0e 94 41 00 	call	0x82	; 0x82 <TC72_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	87 ec       	ldi	r24, 0xC7	; 199
  c0:	9f ea       	ldi	r25, 0xAF	; 175
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x22>
  c8:	00 00       	nop
	_delay_ms(180);
	PORTA = TC72_Recieve(0x00);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 4c 00 	call	0x98	; 0x98 <TC72_Recieve>
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	87 ec       	ldi	r24, 0xC7	; 199
  d4:	9f ea       	ldi	r25, 0xAF	; 175
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x30>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x36>
  dc:	00 00       	nop
	
	_delay_ms(180);
	PORTD = TC72_Recieve(0x02);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 4c 00 	call	0x98	; 0x98 <TC72_Recieve>
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x40>

000000e8 <SPI_Init>:
#include "../libraries_/BIT_Manepulation.h"
void SPI_Init(void)
{

        /*Enable or disable SPI*/
        if(SPI_Group.Enable == SPI_Enable_ON)
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SPI_Group>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	11 f4       	brne	.+4      	; 0xf4 <SPI_Init+0xc>
            SET_BIT(SPCR,SPE);
  f0:	6e 9a       	sbi	0x0d, 6	; 13
  f2:	03 c0       	rjmp	.+6      	; 0xfa <SPI_Init+0x12>
        else if(SPI_Group.Enable == SPI_Enable_OFF)
  f4:	81 11       	cpse	r24, r1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <SPI_Init+0x12>
            CLEAR_BIT(SPCR,SPE);
  f8:	6e 98       	cbi	0x0d, 6	; 13

        /*SPI Master or slave*/
        if(SPI_Group.Type == SPI_Master)
  fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SPI_Group+0x2>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	11 f4       	brne	.+4      	; 0x106 <SPI_Init+0x1e>
            SET_BIT(SPCR,MSTR);
 102:	6c 9a       	sbi	0x0d, 4	; 13
 104:	03 c0       	rjmp	.+6      	; 0x10c <SPI_Init+0x24>
        else if(SPI_Group.Type == SPI_Slave)
 106:	81 11       	cpse	r24, r1
 108:	01 c0       	rjmp	.+2      	; 0x10c <SPI_Init+0x24>
            CLEAR_BIT(SPCR,MSTR);
 10a:	6c 98       	cbi	0x0d, 4	; 13

		/*Enable or disable SPI interrupt*/
		if(SPI_Group.Enable_Interrupt == SPI_INTERRUPT_ON)
 10c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <SPI_Group+0x1>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	11 f4       	brne	.+4      	; 0x118 <SPI_Init+0x30>
			SET_BIT(SPCR,SPIE);
 114:	6f 9a       	sbi	0x0d, 7	; 13
 116:	03 c0       	rjmp	.+6      	; 0x11e <SPI_Init+0x36>
		else if(SPI_Group.Enable_Interrupt == SPI_INTERRUPT_OFF)
 118:	81 11       	cpse	r24, r1
 11a:	01 c0       	rjmp	.+2      	; 0x11e <SPI_Init+0x36>
			CLEAR_BIT(SPCR,SPIE);
 11c:	6f 98       	cbi	0x0d, 7	; 13
		
		
        /*SPI Mode CPOL -> Rising or Falling clock polarity
                CPHA -> Rising or Falling clock edge    */
        if(SPI_Group.Mode == SPI_Mode0)
 11e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <SPI_Group+0x3>
 122:	81 11       	cpse	r24, r1
 124:	03 c0       	rjmp	.+6      	; 0x12c <SPI_Init+0x44>
        {
                CLEAR_BIT(SPCR,CPHA);
 126:	6a 98       	cbi	0x0d, 2	; 13
                CLEAR_BIT(SPCR,CPOL);
 128:	6b 98       	cbi	0x0d, 3	; 13
 12a:	0e c0       	rjmp	.+28     	; 0x148 <SPI_Init+0x60>
        }
        else if(SPI_Group.Mode == SPI_Mode1)
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	19 f4       	brne	.+6      	; 0x136 <SPI_Init+0x4e>
        {
                SET_BIT(SPCR,CPHA);
 130:	6a 9a       	sbi	0x0d, 2	; 13
                CLEAR_BIT(SPCR,CPOL);
 132:	6b 98       	cbi	0x0d, 3	; 13
 134:	09 c0       	rjmp	.+18     	; 0x148 <SPI_Init+0x60>
        }
        else if(SPI_Group.Mode == SPI_Mode2)
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	19 f4       	brne	.+6      	; 0x140 <SPI_Init+0x58>
        {
                SET_BIT(SPCR,CPOL);
 13a:	6b 9a       	sbi	0x0d, 3	; 13
                CLEAR_BIT(SPCR,CPHA);
 13c:	6a 98       	cbi	0x0d, 2	; 13
 13e:	04 c0       	rjmp	.+8      	; 0x148 <SPI_Init+0x60>
        }
        else if(SPI_Group.Mode == SPI_Mode3)
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	11 f4       	brne	.+4      	; 0x148 <SPI_Init+0x60>
        {
                SET_BIT(SPCR,CPOL);
 144:	6b 9a       	sbi	0x0d, 3	; 13
                SET_BIT(SPCR,CPHA);
 146:	6a 9a       	sbi	0x0d, 2	; 13
        }

        /*SPI Prescalar*/
        if(SPI_Group.Double_Speed == SPI_Double_Speed_OFF)
 148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <SPI_Group+0x5>
 14c:	81 11       	cpse	r24, r1
 14e:	09 c0       	rjmp	.+18     	; 0x162 <SPI_Init+0x7a>
        {
            if(SPI_Group.Prescalar == SPI_Fosc4 || SPI_Group.Prescalar == SPI_Fosc16 || SPI_Group.Prescalar == SPI_Fosc64 || SPI_Group.Prescalar == SPI_Fosc128)
 150:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <SPI_Group+0x4>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	80 f4       	brcc	.+32     	; 0x178 <SPI_Init+0x90>
            {
                    SPCR |= (SPI_Group.Prescalar & 0x03);
 158:	9d b1       	in	r25, 0x0d	; 13
 15a:	83 70       	andi	r24, 0x03	; 3
 15c:	89 2b       	or	r24, r25
 15e:	8d b9       	out	0x0d, r24	; 13
 160:	0b c0       	rjmp	.+22     	; 0x178 <SPI_Init+0x90>
            }
            else;
        }
        else if(SPI_Group.Double_Speed == SPI_Double_Speed_ON)
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	49 f4       	brne	.+18     	; 0x178 <SPI_Init+0x90>
        {
            if(SPI_Group.Prescalar == SPI_Fosc4 || SPI_Group.Prescalar == SPI_Fosc16 || SPI_Group.Prescalar == SPI_Fosc64)
 166:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <SPI_Group+0x4>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	28 f4       	brcc	.+10     	; 0x178 <SPI_Init+0x90>
            {
                    SET_BIT(SPSR,SPI2X);
 16e:	70 9a       	sbi	0x0e, 0	; 14
                    SPCR |= (SPI_Group.Prescalar & 0x03);
 170:	9d b1       	in	r25, 0x0d	; 13
 172:	83 70       	andi	r24, 0x03	; 3
 174:	89 2b       	or	r24, r25
 176:	8d b9       	out	0x0d, r24	; 13
            }
            else;
        }

        if(SPI_Group.Data_Order == SPI_MSB)
 178:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <SPI_Group+0x6>
 17c:	81 11       	cpse	r24, r1
 17e:	02 c0       	rjmp	.+4      	; 0x184 <SPI_Init+0x9c>
            CLEAR_BIT(SPCR,DORD);
 180:	6d 98       	cbi	0x0d, 5	; 13
 182:	08 95       	ret
        else if(SPI_Group.Data_Order == SPI_LSB)
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	09 f4       	brne	.+2      	; 0x18a <SPI_Init+0xa2>
            SET_BIT(SPCR,DORD);
 188:	6d 9a       	sbi	0x0d, 5	; 13
 18a:	08 95       	ret

0000018c <SPI_Data_Write>:

}

void SPI_Data_Write(u8 Data)
{
	SPDR = Data;
 18c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 18e:	77 9b       	sbis	0x0e, 7	; 14
 190:	fe cf       	rjmp	.-4      	; 0x18e <SPI_Data_Write+0x2>
}
 192:	08 95       	ret

00000194 <SPI_Data_Read>:
u8 SPI_Data_Read(void)
{
	SPDR = 0x00;
 194:	1f b8       	out	0x0f, r1	; 15
	while( !(SPSR & (1<<SPIF)) );
 196:	77 9b       	sbis	0x0e, 7	; 14
 198:	fe cf       	rjmp	.-4      	; 0x196 <SPI_Data_Read+0x2>
	return SPDR;
 19a:	8f b1       	in	r24, 0x0f	; 15
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
